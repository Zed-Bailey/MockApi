
@using MockApi.Data

@using System.Globalization
@using MockApi.Services
@using System.Configuration
@using System.Collections.ObjectModel
@using System.Collections.Specialized
@using System.Dynamic
@using CsvHelper
@using CsvHelper.Configuration
@inject DataService _dataService
@inject ApiService _apiService
@inject ISnackbar _snackbar
@inject IDialogService _dialogService

@* https://mudblazor.com/components/table#inline-edit-mode *@

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudToolBar>

        @if (!_apiRunning)
        {
            <InputFile id="fileImport" OnChange="ImportCsvFile" hidden accept=".csv"/>
            <MudButton StartIcon="@Icons.Material.Outlined.Upload" Variant="Variant.Filled" Color="Color.Dark" for="fileImport" HtmlTag="label">Import</MudButton>

            <MudSpacer/>
            <MudButton StartIcon="@Icons.Material.Outlined.Power" Variant="Variant.Filled" Color="Color.Info" OnClick="ToggleServer">Start</MudButton>   
        }
        else
        {
            <MudText Align="Align.Left">Listening on: https://@_apiService.Host/api/data</MudText>
            <MudSpacer/>
            <MudButton StartIcon="@Icons.Material.Outlined.StopCircle" Variant="Variant.Filled" Color="Color.Error" OnClick="ToggleServer">Stop</MudButton>
        }
    </MudToolBar>
    
    <MudTable Items="@_dataService.Rows" FixedHeader="true" HorizontalScrollbar="true" Height="400px" Hover="true" IsEditRowSwitchingBlocked="false" 
              OnCommitEditClick="CommitEdit" RowEditPreview="BackupRow" RowEditCancel="ResetRow" RowEditCommit="EditCommitted" Breakpoint="Breakpoint.Sm" 
              Striped="true" Bordered="true" MultiSelection="true" @bind-SelectedItems="_selectedItems">

        @* Dynamically generate the columns *@
        <HeaderContent>
            @foreach (var field in _dataService.ColumnNames)
            {
                <MudTh>@field</MudTh>
            }
        </HeaderContent>
        
        
        @* Dynamically generate the rows *@
        <RowTemplate>
            
            @foreach (var column in context.Columns)
            {
                <MudTd DataLabel="@(column.Key)">@(column.Value ?? "")</MudTd>
            }
        </RowTemplate> 
        
        @* dynamically generate edit templates for the rows and bind the values together *@
        <RowEditingTemplate>
            @foreach (var t in context.Columns)
            {
                <MudTd DataLabel="@(t.Key)"> 
                     <MudTextField T="string" @bind-Value="@t.Value"/> 
                 </MudTd> 
            }
        </RowEditingTemplate>
    </MudTable>
    
    @* Create new row and column buttons *@
    <MudStack Style="margin-top: 30px">
        <MudStack Row="true">
            <MudTooltip Text="Create new column">
                <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" OnClick="NewColumn">Column</MudButton>
            </MudTooltip>
    
            <MudTooltip Text="Edit columns">
                <MudButton StartIcon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Secondary" OnClick="EditColumnNames">Edit Columns</MudButton>
            </MudTooltip>
        </MudStack>
        <div style="margin: 5px" ></div>
        <MudStack Row="true">
            <MudTooltip Text="Create new row">
                <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" OnClick="NewRow">Row</MudButton>
            </MudTooltip>
    
            <MudTooltip Text="Delete rows">
                <MudButton StartIcon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Secondary" OnClick="DeleteRows" Disabled="!(_selectedItems.Count > 0)">Delete Rows</MudButton>
            </MudTooltip>
        </MudStack>

    </MudStack>
    
    
</MudContainer>



@code
{

    bool _apiRunning;
    DynamicRow _editRowBackup;
    HashSet<DynamicRow> _selectedItems = new();


    protected override void OnInitialized()
    {
        _apiRunning = _apiService.ApiEnabled;
        _dataService.Rows.CollectionChanged += RefreshUi;
    }
    
    void RefreshUi(object? sender, NotifyCollectionChangedEventArgs e) => InvokeAsync(StateHasChanged);

    void ToggleServer()
    {
        _apiRunning = !_apiRunning;
        _apiService.ApiEnabled = _apiRunning;
    }

    void NewRow()
    {
        _dataService.AddRow();
        _snackbar.Add("Row Added", Severity.Success);
    }

    void DeleteRows()
    {
        _dataService.DeleteRows(_selectedItems);
        _selectedItems.Clear();
    }

    async void ImportCsvFile(InputFileChangeEventArgs e)
    {
        //Todo: load file and convert to rows
        var file = e.File;

        // check if file is larger then 5mb
        if (file.Size > 5_000_000)
        {
            _snackbar.Add("File is larger then 5mb", Severity.Error);
            return;
        }

        // https://github.com/JoshClose/CsvHelper/issues/1769   
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);
        var config = new CsvConfiguration(CultureInfo.InvariantCulture);
        // https://stackoverflow.com/questions/11654562/how-to-convert-byte-array-to-string
        
        using var reader = new StringReader(System.Text.Encoding.UTF8.GetString(buffer, 0, buffer.Length));
        using var csv = new CsvParser(reader, config);
        await csv.ReadAsync();
        string[] headers = csv.Record;
        
        _dataService.Clear();
        
        // assume first line is header
        foreach (var header in csv.Record)
        {
            if (!_dataService.AddColumn(header))
            {
                _dataService.DeleteColumns(_dataService.ColumnNames);
                _snackbar.Add("Duplicate columns are not currently supported", Severity.Error);
                return;
            }
        }
        
        
        while (await csv.ReadAsync())
        {
            
            var row = new DynamicRow();
            for (var i = 0; i < headers.Length; i++)
            {
                string value;
                // try and get the record on the line, if an exception is thrown then assign a default empty string value
                try
                {
                    value = csv.Record[i];
                }
                catch (Exception exception)
                {
                    value = "";
                }
                
                row.AddColumn(headers[i], value);
            }
            _dataService.Rows.Add(row);
        }
        
        _snackbar.Add("CSV file read successfully", Severity.Success);
    }
    
    // Create a new column
    async Task NewColumn()
    {
        var dialog = _dialogService.Show<NewDialog>("New Column Name");
        var result = await dialog.Result;
        
        // add column if we didn't cancel
        if (!result.Cancelled)
        {
            if (_dataService.AddColumn(result.Data as string))
            {
                Console.WriteLine("new column name: " + result.Data);
                _snackbar.Add("Column Added", Severity.Success);
                return;
            }
            _snackbar.Add("Column already exists!", Severity.Error);

        }
    }

    async Task EditColumnNames()
    {
        var dialogParams = new DialogParameters();
        dialogParams.Add("ColumnNames", _dataService.ColumnNames.ToList());
        
        var dialog = _dialogService.Show<EditColumnsDialog>("Edit Columns", dialogParams);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var data = result.Data as List<string>;
            _dataService.ColumnNames = data;
            _dataService.UpdateRowColumns();
        }
        
    }
    

    void CommitEdit() => _snackbar.Add("Row edit committed");

    void BackupRow(object rowSelectedToEdit)
    {
        _editRowBackup = rowSelectedToEdit as DynamicRow;
    }

    void ResetRow(object rowToReset)
    {
        rowToReset = _editRowBackup;
    }

    void EditCommitted(object element)
    {
        // _snackbar.Add("Changes committed");
    }

}
