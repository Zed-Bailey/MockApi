
@using MockApi.Data

@using System.Globalization
@using MockApi.Services
@using System.Configuration
@using System.Collections.ObjectModel
@inject DataService _dataService
@inject ApiService _apiService
@inject ISnackbar _snackbar
@inject IDialogService _dialogService

@* https://mudblazor.com/components/table#inline-edit-mode *@

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudToolBar>

        @if (!_apiRunning)
        {
            <MudSpacer/>
            <MudButton StartIcon="@Icons.Material.Outlined.Power" Variant="Variant.Filled" Color="Color.Primary" OnClick="ToggleServer">Start</MudButton>   
        }
        else
        {
            <MudText Align="Align.Left">Listening on: https://@_apiService.Host/api/data</MudText>
            <MudSpacer/>
            <MudButton StartIcon="@Icons.Material.Outlined.StopCircle" Variant="Variant.Filled" Color="Color.Error" OnClick="ToggleServer">Stop</MudButton>
        }
    </MudToolBar>
    
    <MudTable Items="@_dataService.Rows" FixedHeader="true" HorizontalScrollbar="true" Height="400px" Hover="true" IsEditRowSwitchingBlocked="false" 
              OnCommitEditClick="CommitEdit" RowEditPreview="BackupRow" RowEditCancel="ResetRow" RowEditCommit="EditCommitted" Breakpoint="Breakpoint.Sm" Striped="true" Bordered="true">

        @* Dynamically generate the columns *@
        <HeaderContent>
            @foreach (var field in _dataService.ColumnNames)
            {
                <MudTh>@field</MudTh>
            }
        </HeaderContent>
        
        
        @* Dynamically generate the rows *@
        <RowTemplate>
            
            @foreach (var column in context.Columns)
            {
                <MudTd DataLabel="@(column.Key)">@(column.Value ?? "")</MudTd>
            }
        </RowTemplate> 
        
        <RowEditingTemplate>
            @foreach (var t in context.Columns)
            {
                <MudTd DataLabel="@(t.Key)"> 
                     <MudTextField T="string" @bind-Value="@t.Value"/> 
                 </MudTd> 
            }
        </RowEditingTemplate>
    </MudTable>
    
    @* Create new row and column buttons *@
    <MudStack Row="true" Style="margin-top: 20px">
        <MudTooltip Text="Create new column">
            <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Dark" OnClick="NewColumn">Column</MudButton>    
        </MudTooltip>
        
          <MudTooltip Text="Edit columns">
                <MudButton StartIcon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="Color.Dark" OnClick="EditColumnNames">Edit Columns</MudButton>    
        </MudTooltip>
        
        <MudTooltip Text="Create new row">
            <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Dark" OnClick="NewRow">Row</MudButton>    
        </MudTooltip>
        
    </MudStack>
    
    
</MudContainer>



@code
{

    bool _apiRunning;

    DynamicRow editRowBackup;
    
    
    
    protected override void OnInitialized()
    {
        _apiRunning = _apiService.ApiEnabled;
    }

    void ToggleServer()
    {
        _apiRunning = !_apiRunning;
        _apiService.ApiEnabled = _apiRunning;
    }

    void NewRow()
    {
        _dataService.AddRow();
        _snackbar.Add("Row Added", Severity.Success);
    }

    
    // Create a new column
    async Task NewColumn()
    {
        var dialog = _dialogService.Show<NewDialog>("New Column Name");
        var result = await dialog.Result;
        
        // add column if we didn't cancel
        if (!result.Cancelled)
        {
            if (_dataService.AddColumn(result.Data as string))
            {
                Console.WriteLine("new column name: " + result.Data);
                _snackbar.Add("Column Added", Severity.Success);
                return;
            }
            _snackbar.Add("Column already exists!", Severity.Error);

        }
    }

    async Task EditColumnNames()
    {
        var dialogParams = new DialogParameters();
        dialogParams.Add("ColumnNames", _dataService.ColumnNames.ToList());
        
        var dialog = _dialogService.Show<RenameColumnsDialog>("Rename Columns", dialogParams);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var data = result.Data as List<string>;
            _dataService.ColumnNames = data;
            _dataService.UpdateRows();
        }
        
    }
    

    void CommitEdit() => _snackbar.Add("Row edit committed");

    void BackupRow(object rowSelectedToEdit)
    {
        editRowBackup = rowSelectedToEdit as DynamicRow;
    }

    void ResetRow(object rowToReset)
    {
        rowToReset = editRowBackup;
    }

    void EditCommitted(object element)
    {
        // _snackbar.Add("Changes committed");
    }

}
